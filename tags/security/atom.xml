<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security - Sam Stelfox&#39;s Thoughts &amp; Notes</title>
    <link>https://stelfox.net/tags/security/</link>
    <description>Recent content in Security - Sam Stelfox&#39;s Thoughts &amp; Notes</description>
    <language>en-US</language>
    <managingEditor>Sam Stelfox</managingEditor>
    <webMaster>Sam Stelfox</webMaster>
    <lastBuildDate>Thu, 12 Oct 2017 15:33:21 -0400</lastBuildDate><atom:link href="https://stelfox.net/tags/security/atom.xml" rel="self" type="application/rss+xml" /><item>
      <title>Auditd</title>
      <link>https://stelfox.net/notes/auditd/</link>
      <pubDate>Thu, 12 Oct 2017 15:33:21 -0400</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/notes/auditd/</guid>
      <description>Auditd collects any configured syscall execution with critical security metadata associated with the event. This can help enrich other security tools such as AIDE to determine what user and process are responsible for the change.
For reliable operation the rules should be carefully tuned to your system. Tracking every write to disk will generate an unreasonable amount of events and depending on the configuration of the kernel&amp;rsquo;s audit subsystem, may trigger a kernel panic.</description>
    </item><item>
      <title>AIDE</title>
      <link>https://stelfox.net/notes/aide/</link>
      <pubDate>Wed, 11 Oct 2017 02:19:45 +0000</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/notes/aide/</guid>
      <description>AIDE (Advanced Intrusion Detection Environment) is a file and directory integrity checker that compares the current hashes, permissions, and attributes of files directories against a known database built from the system.
This can be run periodically to detect manipulation of critical system files, though a motivated attacker with an appropriate level of permissions could modify this database or disable the check as long as the system is able to write to it.</description>
    </item><item>
      <title>Yubikey</title>
      <link>https://stelfox.net/notes/yubikey/</link>
      <pubDate>Tue, 10 Oct 2017 00:28:32 +0000</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/notes/yubikey/</guid>
      <description>Smart Card NEO dnf install ykpers -y ykpersonalize -m82  Unplug and replug it back in and it should be usable as a smartcard.
NFC / HTTP Auth dnf install ykpers -y ykpersonalize -n https://api.stelfox.net/sessions/yknfc?t=  This will hit the API with a URL like: https://api.stelfox.net/session/yknfc?t=ccccccuddclhrkuvurcufviveulljleihvreukifegjh
The API can then return a token that for accessing additional functionality.
Resetting This will wipe all keys, user, and admin pins on the card.</description>
    </item><item>
      <title>GPG Process Notes</title>
      <link>https://stelfox.net/notes/gpg-process-notes/</link>
      <pubDate>Mon, 09 Oct 2017 23:35:34 +0000</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/notes/gpg-process-notes/</guid>
      <description>I followed the TAILS setup guide to get a secure offline environment running to perform this generation task. The steps I took are documented in the tails document.
Initial Key Creation For simplicity I wanted to clear out the GnuPG configuration that starts out in place. Makes things a lot nicer later on.
rm -rf ~/.gnupg/*  I pulled in the .gnupg/gpg.conf from my dotfiles by hand.
And begin the key generation process</description>
    </item><item>
      <title>Better Practices With Sudo</title>
      <link>https://stelfox.net/blog/2016/02/better-practices-with-sudo/</link>
      <pubDate>Fri, 26 Feb 2016 17:45:22 -0500</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2016/02/better-practices-with-sudo/</guid>
      <description>&lt;p&gt;I work with a lot of different linux machines from embedded devices, to cloud
servers and open stack hosts. For many of them I&amp;rsquo;m either the sole
administrator or one of three or less with administrative access. Where there
are multiple administrative users, we all are generally working as backups to
each other. We use sudo whenever we need to execute a task with privileges on
any of these machines with no direct root login permitted remotely.&lt;/p&gt;

&lt;p&gt;I must confess I have established two habits over time that are against best
practices with regard to sudo; Using it to execute a root shell only, and not
restricting which commands can be run with sudo.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item><item>
      <title>SPF &amp; DKIM Records in Route 53</title>
      <link>https://stelfox.net/blog/2014/07/spf-and-dkim-records-in-route-53/</link>
      <pubDate>Wed, 30 Jul 2014 10:46:13 -0400</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2014/07/spf-and-dkim-records-in-route-53/</guid>
      <description>I&amp;rsquo;m going to do a more detailed post on emailing from Amazon&amp;rsquo;s infrastructure soon, but in the meantime I wanted to quickly throw out solutions too a couple of problems I encountered. These are all specific too Amazon&amp;rsquo;s Route 53, and most are user error (myself).
SPF Invalid Characters or Format After generating my SPF record, I jumped into Route 53, created a new record pasted in my record, attempted to save and received the following message:</description>
    </item><item>
      <title>Unregistering From WhisperPush After Flashing a New ROM</title>
      <link>https://stelfox.net/blog/2014/07/unregistering-from-whisperpush-after-flashing-a-new-rom/</link>
      <pubDate>Tue, 22 Jul 2014 21:54:59 -0400</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2014/07/unregistering-from-whisperpush-after-flashing-a-new-rom/</guid>
      <description>I&amp;rsquo;ve been playing around with my Nexus 5 lately. It was quickly rooted and I began playing with various ROMs that had been pre-built for the Nexus 5. My first stop was the CyanogenMod. Since I&amp;rsquo;d last used CyanogenMod they added a built-in framework that provides transparent text message encryption called WhisperPush.
WhisperPush is an implementation of Moxie Marlinspike&amp;rsquo;s highly respected TextSecure and I was very excited at the possibility of using it.</description>
    </item><item>
      <title>Calculating RSA Key Fingerprints in Ruby</title>
      <link>https://stelfox.net/blog/2014/04/calculating-rsa-key-fingerprints-in-ruby/</link>
      <pubDate>Mon, 21 Apr 2014 18:37:04 -0400</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2014/04/calculating-rsa-key-fingerprints-in-ruby/</guid>
      <description>I regularily find myself working on projects that involve the manipulation and storage of RSA keys. In the past I&amp;rsquo;ve never had to worry about identification or presentation of these keys. Normally I&amp;rsquo;ve only got one too three pairs at most that I&amp;rsquo;m manipulating (server, certificate authority, client).
I&amp;rsquo;ve not found myself working on a project that involves presenting the certificates to users for selection and comparison. The obvious way too do this is take a page out of other developer&amp;rsquo;s books and present the key&amp;rsquo;s fingerprint.</description>
    </item><item>
      <title>Creating Crypt Style SHA512 Passwords With Ruby</title>
      <link>https://stelfox.net/blog/2014/02/creating-crypt-style-sha512-passwords-with-ruby/</link>
      <pubDate>Mon, 17 Feb 2014 15:28:27 -0500</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2014/02/creating-crypt-style-sha512-passwords-with-ruby/</guid>
      <description>I needed to generate crypt-style SHA512 passwords in ruby for an /etc/shadow file. After a bunch of Googling and messing around with the OpenSSL library I finally found a very simple built-in way to handle this.
require &amp;#39;securerandom&amp;#39; &amp;#39;password&amp;#39;.crypt(&amp;#39;$6$&amp;#39; + SecureRandom.random_number(36 ** 8).to_s(36)) You&amp;rsquo;ll get a string that looks like:
$6$4dksjo1b$Lt194Dwy7r/7WbM8MezYZysmGcxjaiisgTrTBbHkyBZFXeqQTG0J5hep4wLM/AmYxlGNLRy0OWATLDZCqjwCk.  If you don&amp;rsquo;t want to use the SecureRandom module you can replace the random call with simply rand(36 ** 8) though this isn&amp;rsquo;t recommended.</description>
    </item><item>
      <title>Using VIM as Your Password Manager</title>
      <link>https://stelfox.net/blog/2013/11/using-vim-as-your-password-manager/</link>
      <pubDate>Mon, 25 Nov 2013 15:10:46 -0500</pubDate>
      <author>Sam Stelfox</author>
      <guid>https://stelfox.net/blog/2013/11/using-vim-as-your-password-manager/</guid>
      <description>There are all kinds of password managers out there. Everything from web services that are quite solid and respectible, to native desktop apps.
A lot of these are simply too heavy for me, involve installing software on a computer to access in addition to sharing the file around, or required you to remember multiple account details before you could get access to any individual password.
Due too the various complexities and lack of matching use cases a couple years ago I set out to develop my own open-source version of Passpack.</description>
    </item></channel>
</rss>
