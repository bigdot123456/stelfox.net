<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://stelfox.net/</id>
  <title>Stelfox Athen&amp;#xe6;um</title>
  <updated>2015-04-14T00:47:40Z</updated>
  <link rel="alternate" href="https://stelfox.net/"/>
  <link rel="self" href="https://stelfox.net/atom.xml"/>
  <author>
    <name>Sam Stelfox</name>
    <uri>https://stelfox.net</uri>
  </author>
  <entry>
    <id>tag:stelfox.net,2015-04-13:/blog/2015/04/creating-an-empty-git-branch/</id>
    <title type="html">Creating an Empty Git Branch</title>
    <published>2015-04-14T00:47:40Z</published>
    <updated>2015-04-14T00:47:40Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2015/04/creating-an-empty-git-branch/"/>
    <content type="html">&lt;p&gt;Every now and then I find myself wanting to create a new empty branch in an
existing repository. It&amp;#39;s useful for things such as [Github Pages][1] so you&amp;#39;re
able to keep your content source in the master branch while only keeping the
output in the gh-pages branch. I&amp;#39;ve also used it for testing a complete rewrite
of a code base without the overhead of creating a new repo and copying access
permissions.&lt;/p&gt;

&lt;p&gt;This is a pretty straight forward trick to do. You create the brach by
indicating you want the new branch to be an orphan by passing the &amp;#39;--orphan&amp;#39;
flag like so:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;git checkout --orphan NEW_BRANCH_NAME
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This leaves all the files in place but effectively uncommitted like you just
initialized a new repository. Add and commit any files you&amp;#39;d like to keep then
delete the rest, everything will still be preserved in the original branches.&lt;/p&gt;

&lt;p&gt;With that done you should be able to easily switch just using a normal
&amp;#39;checkout&amp;#39; between your normal branches and this new tree.&lt;/p&gt;

&lt;p&gt;[1]:&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2015-02-23:/blog/2015/02/unbuffered-pipe-filters/</id>
    <title type="html">Unbuffered Pipe Filters</title>
    <published>2015-02-23T17:49:13Z</published>
    <updated>2015-02-23T17:49:13Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2015/02/unbuffered-pipe-filters/"/>
    <content type="html">&lt;p&gt;I need to filter a live logstream for only relevant events and quickly hit an
issue that I wasn&amp;#39;t expecting. The &lt;code&gt;grep&lt;/code&gt; in my pipe chain was waiting until it
received all the output from the prior command before it began to attempt to
filter it.&lt;/p&gt;

&lt;p&gt;Reading through the grep man page I came across the &lt;code&gt;--line-buffered&lt;/code&gt; flag
which provides exactly what I needed. I wasn&amp;#39;t using the &lt;code&gt;tail&lt;/code&gt; command but it
serves really well in this situation to demonstrate the use:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;tail -f /var/log/maillog | grep --line-buffered -i error
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Hope this saves someone a headache in the future!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2014-08-12:/blog/2014/08/dependency-prelink-issues/</id>
    <title type="html">Dependency Prelink Issues</title>
    <published>2014-08-12T20:16:14Z</published>
    <updated>2014-08-12T20:16:14Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2014/08/dependency-prelink-issues/"/>
    <content type="html">&lt;p&gt;While running an aide check on one of my servers after updating it, I started
seeing a large number of very concerning warning messages:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;/usr/sbin/prelink: /bin/mailx: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /bin/rpm: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /sbin/readahead: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /lib64/libkrb5.so.3.3: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /lib64/libgssapi_krb5.so.2.2: at least one of file's dependencies has changed since prelinking
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The list went on with maybe a total of forty packages and libraries. My initial
reaction was &amp;#39;Did I get hacked?&amp;#39;. Before running the updates I ran an aide
verification check which returned no issues and the files that were now
displaying the issue were in the packages that got updated.&lt;/p&gt;

&lt;p&gt;What was the next worse scenario? The packages had been tampered with and I
just installed malicious files. This didn&amp;#39;t seem likely as the packages are all
signed with GPG and an aide check would have caught tampering with my trust
database, the gpg binary, or the aide binary. Still a key could have been
comprimised.&lt;/p&gt;

&lt;p&gt;After some Googling I came across people with similar issues, (including one
annoyingly paywalled RedHat article on the issue). Several people simply ended
the conversation on the assumption the user with the issue had been hacked.
Finally I &lt;a href="http://lists.centos.org/pipermail/centos/2007-December/049222.html"&gt;came across one helpful individual&lt;/a&gt; with the fix. The binaries
just need to have their prelink cache updated again. This can be accomplished
with the following command on CentOS 6.5 (probably the same on others).&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;/usr/sbin/prelink -av -mR
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Ultimately I decided to follow &lt;a href="/knowledge_base/linux/hardening/"&gt;my own advice&lt;/a&gt; (search for
prelink) and just simply disabled prelinking too prevent it from interferring
with aide checks and causing other weird issues. The memory trade-off isn&amp;#39;t
valuable enough for me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2014-08-01:/blog/2014/08/fast-hex-to-decimal-in-bash/</id>
    <title type="html">Fast Hex to Decimal in Bash</title>
    <published>2014-08-01T23:50:24Z</published>
    <updated>2014-08-01T23:50:24Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2014/08/fast-hex-to-decimal-in-bash/"/>
    <content type="html">&lt;p&gt;I needed too turn some hexidecimal values into decimal in a bash script and
found a real easy way too do it. The following is a very short bash script
demostrating how too turn the hexidecimal string &amp;quot;deadbeefcafe&amp;quot; into it&amp;#39;s
equivalent decimal value of &amp;quot;244837814094590&amp;quot;.&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;#!/bin/bash

INPUT=&amp;quot;deadbeefcafe&amp;quot;
OUTPUT=$((0x${INPUT}))

echo $OUTPUT
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2014-07-30:/blog/2014/07/spf-and-dkim-records-in-route-53/</id>
    <title type="html">SPF &amp; DKIM Records in Route 53</title>
    <published>2014-07-30T14:46:13Z</published>
    <updated>2014-07-30T14:46:13Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2014/07/spf-and-dkim-records-in-route-53/"/>
    <content type="html">&lt;p&gt;I&amp;#39;m going to do a more detailed post on emailing from Amazon&amp;#39;s infrastructure
soon, but in the meantime I wanted to quickly throw out solutions too a couple
of problems I encountered. These are all specific too Amazon&amp;#39;s Route 53, and
most are user error (myself).&lt;/p&gt;

&lt;h2&gt;SPF Invalid Characters or Format&lt;/h2&gt;

&lt;p&gt;After generating my SPF record, I jumped into Route 53, created a new record
pasted in my record, attempted to save and received the following message:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The record set could not be saved because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Value field contains invalid characters or is in an invalid format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was using the SPF record type at a time (see the next section) and assumed
that I had messed up the format of my record in some way. I banged my head
against the wall and through RFCs thoroughly before I found the solution...&lt;/p&gt;

&lt;p&gt;Solution: Wrap your SPF records in quotation characters.&lt;/p&gt;

&lt;h2&gt;No SPF Record Found / Validation Failure&lt;/h2&gt;

&lt;p&gt;Since I have my DMARC policy in place (I&amp;#39;ll cover this in my email follow up),
I receive daily domain reports from Google whenever something fails validation
about my domain. After switching to Route 53 for DNS the &lt;code&gt;authresult&lt;/code&gt; component
started showing up as fail for SPF.&lt;/p&gt;

&lt;p&gt;Testing around a few online SPF validators indicated that none of them were
able to see my new SPF record, and there had been plenty of time for it too
propagate.&lt;/p&gt;

&lt;p&gt;The SPF resource record type (RRTYPE 99) is available in Route 53 even though
&lt;a href="https://tools.ietf.org/html/rfc6686#section-3.1"&gt;the record type has been deprecated&lt;/a&gt;. Not being familiar with this
particular decision, I assumed I should be using it &lt;em&gt;instead&lt;/em&gt; of the TXT record
I&amp;#39;ve used for every other domain, and it would be handled correctly or more
intelligently.&lt;/p&gt;

&lt;p&gt;Solution: Either switch the SPF record too a TXT record. or my preference
duplicate it into a TXT record so you have both.&lt;/p&gt;

&lt;h2&gt;Invalid DKIM record&lt;/h2&gt;

&lt;p&gt;This one had me scratching my head for a while. This was my first time
deploying DKIM on a domain that I was not running a Bind name server for.
OpenDKIM is nice enough too generate a Bind record for you which works
perfectly. It&amp;#39;s output looks like the following:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;default._domainkey.example.tld.   IN      TXT     ( &amp;quot;v=DKIM1; k=rsa; t=y; s=email; &amp;quot;
          &amp;quot;p=MIHfMA0GCSqGSIb3DQEBAQUAA4HNADCByQKBwQC2Cwpa/+Xhfkzn0QnyQoxRwoJPb+s51dIt9UtFLMlMFuYa/k3GBwZ7UWeyAaQJ3RibSzKV/YwgFuMrzyISrLNSuL2k1bQlQQG8nl23Mu9Mowcb+mV2/3G7roshK6kOLNA0IV2SBl8/0UoNZR/x7c1lzVtVqdj0vW1SsJzgGfbt4LGRvCPyjdg+SLpYtOd/Li4Y1pvHgSRKQRrklpKeJo&amp;quot;
          &amp;quot;nJQ4+lXWqzYtuX9xdNH46ck2HUl56Ob4cy3/gYCJBWrAsCAwEAAQ==&amp;quot; )  ; ----- DKIM key default for example.tld
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Copying and pasting everything between the parens in the value field and
pasting them into Route 53 works flawlessly. The catch? This won&amp;#39;t be treated
as a single record, but three individual responses. None of which are complete
and valid DKIM records.&lt;/p&gt;

&lt;p&gt;This happens because Route 53&amp;#39;s value field treats newlines as separate
records.&lt;/p&gt;

&lt;p&gt;Solution: Turn it into one long string so it isn&amp;#39;t covering multiple lines
right? Not quite...&lt;/p&gt;

&lt;h2&gt;TXTRDATATooLong&lt;/h2&gt;

&lt;p&gt;Combining the DKIM key into one string like so:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&amp;quot;v=DKIM1; k=rsa; t=y; s=email; p=MIHfMA0GCSqGSIb3DQEBAQUAA4HNADCByQKBwQC2Cwpa/+Xhfkzn0QnyQoxRwoJPb+s51dIt9UtFLMlMFuYa/k3GBwZ7UWeyAaQJ3RibSzKV/YwgFuMrzyISrLNSuL2k1bQlQQG8nl23Mu9Mowcb+mV2/3G7roshK6kOLNA0IV2SBl8/0UoNZR/x7c1lzVtVqdj0vW1SsJzgGfbt4LGRvCPyjdg+SLpYtOd/Li4Y1pvHgSRKQRrklpKeJonJQ4+lXWqzYtuX9xdNH46ck2HUl56Ob4cy3/gYCJBWrAsCAwEAAQ==&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And attempting to save results in the following error message:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Invalid Resource Record: FATAL problem: TXTRDATATooLong encountered at ...&lt;snip&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we&amp;#39;re left in a tricky spot. After some research the reason behind this is
clear, and makes sense. Though it is another poor usability bug in the way
Amazon&amp;#39;s Route 53 behaves. Individual DNS UDP packets are limited too 255
characters for their response.&lt;/p&gt;

&lt;p&gt;Too properly deliver records longer than that DNS servers are supposed to break
up the response into chunks. Properly implemented clients combine these chunks
together (with no spaces, newlines or other characters added). What this means
is that the record can be broken up transparently behind the scenes anywhere in
the message and the client will put it back together correctly.&lt;/p&gt;

&lt;p&gt;The Route 53 entry form won&amp;#39;t handle this for you though, and in hindsight it
looks like Bind might not do it for you though I suspected that was more for
readability of zone files rather than a technical limitation (and I haven&amp;#39;t
tested whether Bind is intelligent enough too handle just a long string).&lt;/p&gt;

&lt;p&gt;Solution: Take the original output of Bind between the parens and just remove
the newline characters, leave the quotation marks and spaces between the
sections like the following sample and you&amp;#39;ll be golden:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&amp;quot;v=DKIM1; k=rsa; t=y; s=email; &amp;quot; &amp;quot;p=MIHfMA0GCSqGSIb3DQEBAQUAA4HNADCByQKBwQC2Cwpa/+Xhfkzn0QnyQoxRwoJPb+s51dIt9UtFLMlMFuYa/k3GBwZ7UWeyAaQJ3RibSzKV/YwgFuMrzyISrLNSuL2k1bQlQQG8nl23Mu9Mowcb+mV2/3G7roshK6kOLNA0IV2SBl8/0UoNZR/x7c1lzVtVqdj0vW1SsJzgGfbt4LGRvCPyjdg+SLpYtOd/Li4Y1pvHgSRKQRrklpKeJo&amp;quot; &amp;quot;nJQ4+lXWqzYtuX9xdNH46ck2HUl56Ob4cy3/gYCJBWrAsCAwEAAQ==&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Hope this helps someone else!&lt;/p&gt;
</content>
  </entry>
</feed>

