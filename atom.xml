<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://stelfox.net/</id>
  <title>Stelfox Athen&amp;#xe6;um</title>
  <updated>2015-04-22T20:47:10Z</updated>
  <link rel="alternate" href="https://stelfox.net/"/>
  <link rel="self" href="https://stelfox.net/atom.xml"/>
  <author>
    <name>Sam Stelfox</name>
    <uri>https://stelfox.net</uri>
  </author>
  <entry>
    <id>tag:stelfox.net,2015-04-22:/blog/2015/04/ruby-code-quality-metrics/</id>
    <title type="html">Ruby Code Quality Metrics</title>
    <published>2015-04-22T20:47:10Z</published>
    <updated>2015-04-22T20:47:10Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2015/04/ruby-code-quality-metrics/"/>
    <content type="html">&lt;p&gt;I like getting unopionated feedback on the quality of the code I write.
Sometimes I can get this from other developers but they tend to get annoyed
being asked after every commit whether they consider it an approvement.&lt;/p&gt;

&lt;p&gt;There are a few utilities for Ruby codebases such as &lt;a href="https://github.com/seattlerb/flay"&gt;flay&lt;/a&gt;, &lt;a href="https://github.com/seattlerb/flog"&gt;flog&lt;/a&gt;, and
&lt;a href="https://github.com/bbatsov/rubocop"&gt;rubocop&lt;/a&gt; as well as hosted services such as &lt;a href="https://codeclimate.com/"&gt;Code Climate&lt;/a&gt; that can help
you identify chunks of code that can use some work.&lt;/p&gt;

&lt;p&gt;While not directly connected to the quality of the code, I also make use of
&lt;a href="http://yardoc.org/"&gt;yard&lt;/a&gt; and &lt;a href="https://github.com/colszowka/simplecov"&gt;simplecov&lt;/a&gt; to assess documentation and test coverage of the
codebases I work on.&lt;/p&gt;

&lt;p&gt;Using the tools means very little without some reference or understanding
doesn&amp;#39;t get you very far. For a while I&amp;#39;ve been using flog and only comparing
the numbers against other codebases I control. I finally googled around and
found a &lt;a href="http://jakescruggs.blogspot.com/2008/08/whats-good-flog-score.html"&gt;blog post&lt;/a&gt; by a developer named Jake Scruggs from a while ago
(2008).&lt;/p&gt;

&lt;p&gt;The blog post includes a rough table for assessing scores on individual methods
reported from the flog utility. From what I can tell the ranges are still
pretty accurate. I&amp;#39;ve tweaked the descriptions a bit to fit my mental
understanding a bit but the table is here:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method Score&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0   - 10&lt;/td&gt;
&lt;td&gt;Awesome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10  - 20&lt;/td&gt;
&lt;td&gt;Decent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20  - 40&lt;/td&gt;
&lt;td&gt;Might need refactoring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40  - 60&lt;/td&gt;
&lt;td&gt;Should probably review&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;60  - 100&lt;/td&gt;
&lt;td&gt;Danger&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100 - 200&lt;/td&gt;
&lt;td&gt;Raise the alarm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;200+&lt;/td&gt;
&lt;td&gt;Seriously what are you doing!?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;I wanted to extend this with a second table providing a scale for the overall
method average with a more aggressive scale (an individual couple of methods
can be justifiably complex but the overall code base shouldn&amp;#39;t be riddled with
them) but had a hard time working it out.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve seen some awesome code bases with a score of 6.4 on average, some bad
larger ones with 7.8. Even some mediocre ones around a score of 10.6.&lt;/p&gt;

&lt;p&gt;I guess I&amp;#39;ll have to think more on it...&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2015-04-13:/blog/2015/04/creating-an-empty-git-branch/</id>
    <title type="html">Creating an Empty Git Branch</title>
    <published>2015-04-14T00:47:40Z</published>
    <updated>2015-04-14T00:47:40Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2015/04/creating-an-empty-git-branch/"/>
    <content type="html">&lt;p&gt;Every now and then I find myself wanting to create a new empty branch in an
existing repository. It&amp;#39;s useful for things such as [Github Pages][1] so you&amp;#39;re
able to keep your content source in the master branch while only keeping the
output in the gh-pages branch. I&amp;#39;ve also used it for testing a complete rewrite
of a code base without the overhead of creating a new repo and copying access
permissions.&lt;/p&gt;

&lt;p&gt;This is a pretty straight forward trick to do. You create the brach by
indicating you want the new branch to be an orphan by passing the &amp;#39;--orphan&amp;#39;
flag like so:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;git checkout --orphan NEW_BRANCH_NAME
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This leaves all the files in place but effectively uncommitted like you just
initialized a new repository. Add and commit any files you&amp;#39;d like to keep then
delete the rest, everything will still be preserved in the original branches.&lt;/p&gt;

&lt;p&gt;With that done you should be able to easily switch just using a normal
&amp;#39;checkout&amp;#39; between your normal branches and this new tree.&lt;/p&gt;

&lt;p&gt;[1]:&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2015-02-23:/blog/2015/02/unbuffered-pipe-filters/</id>
    <title type="html">Unbuffered Pipe Filters</title>
    <published>2015-02-23T17:49:13Z</published>
    <updated>2015-02-23T17:49:13Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2015/02/unbuffered-pipe-filters/"/>
    <content type="html">&lt;p&gt;I need to filter a live logstream for only relevant events and quickly hit an
issue that I wasn&amp;#39;t expecting. The &lt;code&gt;grep&lt;/code&gt; in my pipe chain was waiting until it
received all the output from the prior command before it began to attempt to
filter it.&lt;/p&gt;

&lt;p&gt;Reading through the grep man page I came across the &lt;code&gt;--line-buffered&lt;/code&gt; flag
which provides exactly what I needed. I wasn&amp;#39;t using the &lt;code&gt;tail&lt;/code&gt; command but it
serves really well in this situation to demonstrate the use:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;tail -f /var/log/maillog | grep --line-buffered -i error
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Hope this saves someone a headache in the future!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2014-08-12:/blog/2014/08/dependency-prelink-issues/</id>
    <title type="html">Dependency Prelink Issues</title>
    <published>2014-08-12T20:16:14Z</published>
    <updated>2014-08-12T20:16:14Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2014/08/dependency-prelink-issues/"/>
    <content type="html">&lt;p&gt;While running an aide check on one of my servers after updating it, I started
seeing a large number of very concerning warning messages:&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;/usr/sbin/prelink: /bin/mailx: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /bin/rpm: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /sbin/readahead: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /lib64/libkrb5.so.3.3: at least one of file's dependencies has changed since prelinking
Error on exit of prelink child process
/usr/sbin/prelink: /lib64/libgssapi_krb5.so.2.2: at least one of file's dependencies has changed since prelinking
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The list went on with maybe a total of forty packages and libraries. My initial
reaction was &amp;#39;Did I get hacked?&amp;#39;. Before running the updates I ran an aide
verification check which returned no issues and the files that were now
displaying the issue were in the packages that got updated.&lt;/p&gt;

&lt;p&gt;What was the next worse scenario? The packages had been tampered with and I
just installed malicious files. This didn&amp;#39;t seem likely as the packages are all
signed with GPG and an aide check would have caught tampering with my trust
database, the gpg binary, or the aide binary. Still a key could have been
comprimised.&lt;/p&gt;

&lt;p&gt;After some Googling I came across people with similar issues, (including one
annoyingly paywalled RedHat article on the issue). Several people simply ended
the conversation on the assumption the user with the issue had been hacked.
Finally I &lt;a href="http://lists.centos.org/pipermail/centos/2007-December/049222.html"&gt;came across one helpful individual&lt;/a&gt; with the fix. The binaries
just need to have their prelink cache updated again. This can be accomplished
with the following command on CentOS 6.5 (probably the same on others).&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;/usr/sbin/prelink -av -mR
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Ultimately I decided to follow &lt;a href="/knowledge_base/linux/hardening/"&gt;my own advice&lt;/a&gt; (search for
prelink) and just simply disabled prelinking too prevent it from interferring
with aide checks and causing other weird issues. The memory trade-off isn&amp;#39;t
valuable enough for me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:stelfox.net,2014-08-01:/blog/2014/08/fast-hex-to-decimal-in-bash/</id>
    <title type="html">Fast Hex to Decimal in Bash</title>
    <published>2014-08-01T23:50:24Z</published>
    <updated>2014-08-01T23:50:24Z</updated>
    <link rel="alternate" href="https://stelfox.net/blog/2014/08/fast-hex-to-decimal-in-bash/"/>
    <content type="html">&lt;p&gt;I needed too turn some hexidecimal values into decimal in a bash script and
found a real easy way too do it. The following is a very short bash script
demostrating how too turn the hexidecimal string &amp;quot;deadbeefcafe&amp;quot; into it&amp;#39;s
equivalent decimal value of &amp;quot;244837814094590&amp;quot;.&lt;/p&gt;
&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;#!/bin/bash

INPUT=&amp;quot;deadbeefcafe&amp;quot;
OUTPUT=$((0x${INPUT}))

echo $OUTPUT
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

